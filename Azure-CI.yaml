trigger:
  batch: true
  branches:
    include:
      - "*"
  tags:
    include:
      - v-*
  paths:
    exclude:
      - README.md
 
variables:
  - template: ../variables-shared.yaml
  - group: PrismaIACToken
 
pool: AflacAWSLinuxAgentPool
 
workspace:
  clean: all
 
resources:
  repositories:
    - repository: templates
      type: github
      name: Aflac-SCM/DevOps-GenericPipeline-Templates
      endpoint: "Aflac-SCM"
      ref: refs/tags/v-202309.1
 
steps:
  # Run cfn-lint to check for validation errors
  - template: pipelines/infrastructure/iac-validation-template.yml@templates
    parameters:
      template_path: "$(iacCodeDirectory)/**/*.yaml"
 
  # Run iac compliance scanning to check for security/config issues
  - template: pipelines/common/iac-scan-ci-template.yml@templates
    parameters:
      prismaAccessKey: $(accessKeyID)
      prismaAPISecret: $(prismaSecret)
      iacDirectory: $(iacCodeDirectory)
      #ContinueOnFail: true
 
  # Run SQ Prepare Configuration for analysis
  # https://sonarqube.aws.aflac.com/
  - template: pipelines/common/sonarqube-prepare-ci-template.yml@templates
    parameters:
      sonarqubeBuildTool: "other"
      projectName: $(componentName)
      projectKey: $(asCode)-$(componentName)
      extraProperties: ""
 
  # Run SQ Analysis and Publish Results to SonarQube Server
  # https://sonarqube.aws.aflac.com/
  - template: pipelines/common/sonarqube-analyze-publish-ci-template.yml@templates
 
  # Run SQ Build Breaker
  # https://sonarqube.aws.aflac.com/
  - task: sonar-buildbreaker@8
    displayName: SonarQubeBuildBreaker
    inputs:
      SonarQube: "SonarHTTPSConnection"
 
  # # Running Static Application Security Testing with Veracode:
  # - template: pipelines/security-scan-ci-template.yml@templates
  #   parameters:
  #     veracodeApplicationProfile: "$(asCode)-$(componentName)-ADO"
  #     binaryFilePath: "$(Build.ArtifactStagingDirectory)"
 
  # Zip CFT Files:
  - ${{ if eq(variables['build.sourceBranch'], 'refs/heads/main') }}:
      - task: Bash@3
        displayName: Zip IaC for Publishing
        inputs:
          targetType: "inline"
          script: "zip -r $(Build.BuildNumber).zip CloudFormationTemplate"
          workingDirectory: "$(Build.SourcesDirectory)"
          failOnStderr: true
 
      # Copy files to Artifact Staging Directory:
      - task: CopyFiles@2
        displayName: Copy Files to Staging Directory
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)"
          Contents: "$(buildArtifactsToPublish)"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"
 
      # Publish Artifact:
      - task: PublishBuildArtifacts@1
        displayName: Publish to Azure DevOps
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "drop"
          publishLocation: "Container"
 
      # Upload Artifact in JFrog Repository:
      - task: ArtifactoryGenericUpload@2
        condition: and(succeeded(), in(variables['Build.SourceBranchName'], 'main'))
        displayName: Publish to artifactory
        inputs:
          artifactoryService: "ArtifactoryServiceConnection"
          specSource: "taskConfiguration"
          fileSpec: |
            {
              "files": [
                {
                  "pattern": "$(Build.ArtifactStagingDirectory)/(**)",
                  "target":  "$(applicationName)-generic-nonprod/$(componentName)/$(Build.BuildNumber)/{1}",
                  "flat" : "false"
                }
              ]
            }
          replaceSpecVars: true
          collectBuildInfo: true
          buildName: "$(Build.DefinitionName)"
          buildNumber: "$(Build.BuildNumber)"
          module: "module"
          includeEnvVars: true
          failNoOp: true
          symlinks: true
has context menu
